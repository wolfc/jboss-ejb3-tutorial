<?xml version="1.0" encoding="UTF-8"?>
<chapter id="Session_Beans">
   <title>Creating an EJB 3 Session Bean</title>

   <section>
      <title>Session Bean Class</title>
      It is very easy to create a session bean with EJB 3. Any POJO can be
      transformed into an EJB by annotating it. Since all bean types in EJB 3
      are homeless the POJO does not need to implement any interfaces. Take
      a look at <literal>org.jboss.tutorial.stateless.bean.CalculatorBean</literal>.
      <programlisting>
@Stateless
public class CalculatorBean implements CalculatorRemote, CalculatorLocal {
    public int add(int x, int y) {
        return x + y;
    }
}</programlisting>

      <para>
         The first thing to notice is that the class is tagged as
         <literal>@Stateless</literal>. This marks the class as a stateless bean
         and the EJB Container will deploy that class as a stateless bean
         component.
      </para>
   </section>

   <section>
      <title>Session Bean Types</title>
      The EJB 3 specification defines three different session bean types.
      <itemizedlist mark="bullet">
         <listitem><simpara>Stateless Session</simpara></listitem>
         <listitem><simpara>Stateful Session</simpara></listitem>
         <listitem><simpara>Singleton</simpara></listitem>
      </itemizedlist>
      In case of a stateless session bean each invocation is assigned to a
      random instance. On a stateful session bean each invocation is assigned
      to the same instance, which contains the conversational state on behalf
      of the session object's client. A single instance is available to handle
      invocations when its designated as a Singleton.
      <caution><para>
         The terms Stateless, Stateful and Singleton do not apply to the backing
         POJO of the EJB. The POJO always contains state regardless of how it
         plays in client session scenarios.
      </para></caution>
   </section>

   <section>
      <title>Session Bean Interfaces</title>
      <para>
      In this case the CalculatorBean also implements two interfaces. One is
      the remote business interface of the EJB the other is the local business
      interface. Should the bean implement no interfaces it is exposed with the
      No-Interface view. The bean class itself will then serve as a local
      business 'interface'.
      </para>

      <para>
      Take a look at
      <literal>org.jboss.tutorial.stateless.bean.CalculatorRemote</literal>.

      <programlisting>
@Remote
public interface CalculatorRemote extends Calculator {
}</programlisting>

      To define this as the remote business interface of Calculator bean you
      either annotate the bean class and specify what the remote interfaces
      are, or you annotate each remote business interface with
      <literal>@javax.ejb.Remote</literal>.
      </para>

      <para>
      Similar for <classname>org.jboss.tutorial.stateless.bean.CalculatorLocal</classname>
      you need to annotate the class with <literal>@javax.ejb.Local</literal>
      for it to be the local business interface of the CalculatorBean.
      </para>
   </section>

   <section>
      <title>JNDI Bindings</title>
      The Calculator bean will have four global JNDI bindings for the remote-
      and local business interfaces.
      By default, JBoss will use ejbName/local and ejbName/remote for the local and remote interfaces, respectively.
      <itemizedlist mark="bullet">
         <listitem><literal>java:global/stateless-tutorial/CalculatorBean!org.jboss.tutorial.stateless.bean.CalculatorLocal</literal></listitem>
         <listitem><literal>java:global/stateless-tutorial/CalculatorBean!org.jboss.tutorial.stateless.bean.CalculatorRemote</literal></listitem>
         <listitem><literal>java:global/stateless-tutorial/CalculatorBean!local</literal></listitem>
         <listitem><literal>java:global/stateless-tutorial/CalculatorBean!remote</literal></listitem>
      </itemizedlist>
      <note><para>
         The JNDI bindings <literal>!local</literal> and <literal>!remote</literal>
         are JBoss specific. The object bound will implement all local or remote
         business interfaces respectively.
      </para></note>
   </section>

   <section>
      <title>Testing your EJB</title>
      Open up <literal>org.jboss.tutorial.stateless.test.CalculatorBeanTestCase</literal>.
      <programlisting>@RunWith(Arquillian.class)
public class CalculatorBeanTestCase {
    @EJB
    private CalculatorLocal calculator;

    @Deployment
    public static JavaArchive deployment() {
        return ShrinkWrap.create(JavaArchive.class)
                .addPackage(CalculatorBean.class.getPackage());
    }

    @Test
    public void testAdd() {
        assertEquals(2, calculator.add(1, 1));
    }
}</programlisting>
      You can inject the bean into your Arquillian test case. Since there is
      no home interface, the test can invoke upon the bean right away.
   </section>

<!--
   <section>
      <title>Client</title>
      Open up <literal>org.jboss.tutorial.stateless.client.Client</literal>.
      <programlisting>public class Client {
    public static void main(String[] args) throws Exception {
        InitialContext ctx = new InitialContext();
        Calculator calculator = (Calculator) ctx.lookup("java:global/stateless-tutorial/CalculatorBean!remote");

        System.out.println("1 + 1 = " + calculator.add(1, 1));
    }
}</programlisting>
      The client obtains a reference to the stateless session bean by
      looking up <literal>"java:global/stateless-tutorial/CalculatorBean!remote"</literal>.
      Also notice that there is no home interface and you can begin executing
      on the stateless session bean right away.
   </section>
-->

   <section>
      <title>Building and Running</title>

      <note>
         <para>
To build and run the example, make sure you have installed JBoss 6.x.
See the <xref linkend="JBossAS6">installation section</xref> for details.
         </para>
      </note>
      <para>
         From the command prompt, move to the "stateless" folder under the <xref linkend="EJB3_TUTORIAL_HOME">EJB3_TUTORIAL_HOME</xref>
      </para>
      <!--
      <section>
         <title>Ant</title>
         <para>
            Make sure your JBossAS-5.x is running
         </para>
         <programlisting>$ ant
$ ant run</programlisting>
      </section>
      -->
      <section>
         <title>Maven</title>
         <para>
            Make sure the Application Server is running and execute the following command:
            <programlisting>$ mvn -Pjbossas-remote-6 package</programlisting>
         </para>
      </section>
   </section>
</chapter>



<?xml version='1.0' encoding='UTF-8'?>
<chapter id="Message_Driven_Beans">
   <title>Creating an EJB 3 Message-Driven Bean</title>
   <para>
      This example shows you how to implement an MDB with EJB 3 using annotations.
   </para>
   
   <section>
      <title>Message-Driven Bean Class</title>
      Take a look at <literal>org.jboss.tutorial.mdb.bean.ExampleMDB</literal>.
      <programlisting>@MessageDriven(activationConfig = {
        @ActivationConfigProperty(propertyName = "destinationType", propertyValue = "javax.jms.Queue"),
        @ActivationConfigProperty(propertyName = "destination", propertyValue = "queue/tutorial/example")
})
public class ExampleMDB implements MessageListener {
    public void onMessage(Message recvMsg) {
        System.out.println("Received message " + recvMsg);
    }
}</programlisting>
      The @MessageDriven annotation defines the bean as an MDB.
      The <literal>activationConfig</literal> attribute contains much of the
      MDB configuration via <literal>@ActivationConfigProperty</literal>.
      Also notice that the MDB source contains properties for
      <literal>destinationType</literal> and <literal>destination</literal>.
      These properties are passed to the JCA resource adapter to create
      the endpoint onto which messages are delivered.
      <para>
         Finally the class implements the applicable message listener interface. In this case
         <literal>javax.jms.MessageListener</literal> for use with a JMS Resource Adapter.
      </para>
   </section>

   <section>
      <title>Resource Adapter</title>
      By default the MDB uses the <literal>jms-ra.rar</literal> resource adapter. To use a different
      resource adapter the bean can be annotated with <literal>org.jboss.ejb3.annotation.ResourceAdapter</literal>.
      <programlisting>@ResourceAdapter("hornetq-ra.rar")</programlisting>
   </section>

   <section>
      <title>Standard JCA Activation Properties</title>
      The following is the list of standard Activation Config Properties available from the JCA 1.5 specification.
      Also listed are the respective types and default values where defined.
      <informaltable frame='all'>
         <tgroup cols="5" colsep="1" rowsep="1">
            <colspec colwidth='0.5in'/>
            <thead>
               <row>
                    <entry>Name</entry>
                    <entry>Type</entry>
                  <entry>Remarks</entry>
                  <entry>Mandatory?</entry>
                  <entry>Default value</entry>
               </row>
            </thead>

            <tbody>
               <row>
                  <entry>destination</entry>
                  <entry>java.lang.String</entry>
                  <entry>The logical name of the destination. Usually the JNDI name of the <literal>Queue</literal>
                     or <literal>Topic</literal></entry>
                  <entry>Yes</entry>
                  <entry></entry>
               </row>

               <row>
                  <entry>destinationType</entry>
                  <entry>java.lang.String</entry>
                  <entry>The type of destination valid values are <literal>javax.jms.Queue</literal>
                     or <literal>javax.jms.Topic</literal></entry>
                  <entry>Yes</entry>
                  <entry></entry>
               </row>

               <row>
                  <entry>messageSelector</entry>
                  <entry>java.lang.String</entry>
                  <entry>The message selector of the subscription</entry>
                  <entry>No</entry>
                  <entry></entry>
               </row>

               <row>
                  <entry>acknowledgeMode</entry>
                  <entry>int</entry>
                  <entry>The type of acknowledgement when not using transacted jms - valid values
                     <literal>AUTO_ACKNOWLEDGE</literal> or <literal>DUPS_OK_ACKNOWLEDGE</literal></entry>
                  <entry>No</entry>
                  <entry><literal>AUTO_ACKNOWLEDGE</literal></entry>
               </row>

               <row>
                  <entry>clientID</entry>
                  <entry>java.lang.String</entry>
                  <entry>The client id of the connection</entry>
                  <entry>No</entry>
                  <entry></entry>
               </row>

               <row>
                  <entry>subscriptionDurability</entry>
                  <entry>String</entry>
                  <entry>Whether topic subscriptions are durable. Valid values are <literal>Durable</literal>
                     or <literal>NonDurable</literal></entry>
                  <entry>No</entry>
                  <entry><literal>NonDurable</literal></entry>
               </row>

               <row>
                  <entry>subscriptionName</entry>
                  <entry>String</entry>
                  <entry>The subsription name of the topic subscription</entry>
                  <entry>No</entry>
                  <entry></entry>
               </row>
            </tbody>
         </tgroup>
      </informaltable>
   </section>

   <section>
      <title>Pooling and Sessions</title>
      <para>
         Most resource adapters allow configuration of the amount of sessions that should deliver messages
         to the Message-Driven Bean. The MDB itself also allows a pool to be configured that manages the amount
         of instances that will service the sessions.
      </para>
      <para>
         For maximum concurrency it is advised that the <literal>ThreadlocalPool</literal> is used. But that
         implementation depends on a Resource Adapter that in itself uses a pool of threads for servicing its
         sessions. In that case the amount of MDB instances will remain lower or equal to the maximum amount
         of configured sessions. Otherwise stick to using <literal>StrictMaxPool</literal> for governing the
         amount of bean instances. The <literal>maxSize</literal> should be configured the same as the maximum
         amount of sessions though.
      </para>
      <para>
         The pool can be configured using <literal>@org.jboss.ejb3.annotation.Pool</literal>.
      </para>
      <caution>
         <title>ThreadlocalPool or StrictMaxPool</title>
         <para>
            Only use ThreadlocalPool if the Resource Adapter does proper thread pooling.
         </para>
      </caution>
   </section>

   <section>
      <title>Transactions</title>
      <caution>
         <title>Sending</title>
         <para>
            If within a transaction, do not send and wait for reply in any EJB.
            The send will happen on commit!
         </para>
      </caution>
   </section>
   
   <section>
      <title>JBoss RA Specific Activation Properties</title>
      The JBoss Resource Adapter is available in AS 4, 5 and 6.
      The following is the list of Activation Config Properties available as JBoss RA extensions.

      <informaltable frame='all'>
         <tgroup cols="5" colsep="1" rowsep="1">
            <colspec colwidth='0.5in'/>
                
            <thead>
               <row>
                  <entry>Name</entry>
                  <entry>Type</entry>
                  <entry>Remarks</entry>
                  <entry>Mandatory?</entry>
                  <entry>Default value</entry>
               </row>
            </thead>

            <tbody>
               <row>
                  <entry>isTopic</entry>
                  <entry>boolean</entry>
                  <entry>Sets the destinationType</entry>
                  <entry>No</entry>
                  <entry>false</entry>
               </row>

               <row>
                  <entry>providerAdapterJNDI</entry>
                  <entry>java.lang.String</entry>
                  <entry>The jndi name of the jms provider</entry>
                  <entry>No</entry>
                  <entry>java:/DefaultJMSProvider</entry>
               </row>

               <row>
                  <entry>user</entry>
                  <entry>java.lang.String</entry>
                  <entry>The user id used to connect to the jms server</entry>
                  <entry>No</entry>
                  <entry></entry>
               </row>

               <row>
                  <entry>pass</entry>
                  <entry>java.lang.String</entry>
                  <entry>The password of the user</entry>
                  <entry>No</entry>
                  <entry></entry>
               </row>

               <row>
                  <entry>maxMessages</entry>
                  <entry>int</entry>
                  <entry>Read this number of messages before delivering messages to the mdb.
                     Each message is delivered individually on the same thread in an attempt to
                     avoid context excessive context switching
                  </entry>
                  <entry>No</entry>
                  <entry>1</entry>
               </row>

               <row>
                  <entry>minSession</entry>
                  <entry>int</entry>
                  <entry>The minimum number of jms sessions that are available to concurrently deliver messages to this mdb</entry>
                  <entry>No</entry>
                  <entry>1</entry>
               </row>

               <row>
                  <entry>maxSession</entry>
                  <entry>int</entry>
                  <entry>The maximum number of jms sessions that are available to concurrently deliver messages to this mdb</entry>
                  <entry>No</entry>
                  <entry>15</entry>
               </row>

               <row>
                  <entry>reconnectInterval</entry>
                  <entry>long</entry>
                  <entry>The length of time in seconds between attempts to (re-)connect to the jms provider</entry>
                  <entry>No</entry>
                  <entry>10 seconds</entry>
               </row>

               <row>
                  <entry>keepAlive</entry>
                  <entry>long</entry>
                  <entry>The length of time in milliseconds that sessions over the minimum are kept alive</entry>
                  <entry>No</entry>
                  <entry>60 seconds</entry>
               </row>

               <row>
                  <entry>sessionTransacted</entry>
                  <entry>boolean</entry>
                  <entry>Whether the sessions are transacted</entry>
                  <entry>No</entry>
                  <entry>true</entry>
               </row>

               <row>
                  <entry>useDLQ</entry>
                  <entry>boolean</entry>
                  <entry>Whether to use a DLQ handler</entry>
                  <entry>No</entry>
                  <entry>true</entry>
               </row>

               <row>
                  <entry>dLQJNDIName</entry>
                  <entry>java.lang.String</entry>
                  <entry>The JNDI name of the DLQ</entry>
                  <entry>No</entry>
                  <entry>queue/DLQ</entry>
               </row>

               <row>
                  <entry>dLQHandler</entry>
                  <entry>java.lang.String</entry>
                  <entry>The org.jboss.resource.adapter.jms.inflow.DLQHandler implementation class name</entry>
                  <entry>No</entry>
                  <entry>org.jboss.resource.adapter.jms.inflow.dlq.GenericDLQHandler</entry>
               </row>

               <row>
                  <entry>dLQUser</entry>
                  <entry>java.lang.String</entry>
                  <entry>The user id used to make the dlq connection to the jms server</entry>
                  <entry>No</entry>
                  <entry></entry>
               </row>

               <row>
                  <entry>dLQPassword</entry>
                  <entry>java.lang.String</entry>
                  <entry>The password of the dLQUser</entry>
                  <entry>No</entry>
                  <entry></entry>
               </row>

               <row>
                  <entry>dLQClientID</entry>
                  <entry>java.lang.String</entry>
                  <entry>The client id of the dlq connection</entry>
                  <entry>No</entry>
                  <entry></entry>
               </row>

               <row>
                  <entry>dLQMaxResent</entry>
                  <entry>int</entry>
                  <entry>The maximum number of times a message is redelivered before it is sent to the DLQ</entry>
                  <entry>No</entry>
                  <entry>5</entry>
               </row>

               <row>
                  <entry>redeliverUnspecified</entry>
                  <entry>boolean</entry>
                  <entry>Whether to attempt to redeliver a message in an unspecified transaction context</entry>
                  <entry>No</entry>
                  <entry>true</entry>
               </row>

               <row>
                  <entry>transactionTimeout</entry>
                  <entry>int</entry>
                  <entry>Time in seconds for the transaction timeout</entry>
                  <entry>No</entry>
                  <entry>Default is the timeout set for the resource manager</entry>
               </row>
                    
               <row>
                  <entry>DeliveryActive</entry>
                  <entry>boolean</entry>
                  <entry>Whether the MDB should make the subscription at initial deployment or wait for start() or stopDelivery()
                  on the corresponding MBean. You can set this to false if you want to prevent messages from being delivered
                  to the MDB (which is still starting) during server startup</entry>
                  <entry>No</entry>
                  <entry>true</entry>
               </row>
            </tbody>
         </tgroup>
      </informaltable>
   </section>

   <section>
      <title>Creating the JMS queue</title>
      Depending on the JMS provider, choose the correct queue descriptor file.
      <section>
         <title>JBossMQ</title>
         <para>
            The <literal>queue-example-service.xml</literal> file defines the queues for this tutorial.
         </para>
      </section>

      <section>
         <title>HornetQ</title>
         <para>
            The <literal>tutorial-hornetq-jms.xml</literal> file contains queue definitions for HornetQ.
            Copy this file to the deploy directory of JBoss AS to enable the queues.
         </para>
      </section>
   </section>

   <section>
      <title>Configuring Default MDB Properties</title>
      <caution><para>Does not apply to AS 7</para></caution>
      <para>
         You can configure MDBs to have default properties using the <literal>@org.jboss.ejb3.annotation.DefaultActivationSpecs</literal>
         annotations. Take a look at <literal>custom-ejb3-interceptors-aop.xml</literal>. Here we define a custom container
         configuration domain, <literal>"Custom Message Driven Bean"</literal>, that adds a <literal>@DefaultActivationSpecs</literal>
         annotation and <literal>destinationType</literal> and <literal>destination</literal> properties to each MDB using this domain.
         Now take a look at <literal>org.jboss.tutorial.mdb.bean.DefaultedExampleMDB</literal>. The MDB is configured to use the
         <literal>"Custom Message Driven Bean"</literal> container configuration domain via the <literal>@AspectDomain</literal> annotation.
         Note there are no properties defined in the <literal>@MessageDriven</literal> annotation (they are all from the defaults).
      </para>
   </section>

   <section>
      <title>Building and Running</title>
      <para>
         <note>
               <para>
To build and run the example, make sure you have installed JBoss 6.x.
See the <xref linkend="JBossAS6">installation section</xref> for details.
               </para>
         </note>
         From the command prompt, move to the "mdb" folder under the <xref linkend="EJB3_TUTORIAL_HOME">EJB3_TUTORIAL_HOME</xref>
         <!--
         <section>
            <title>Ant</title>
            <para>
            Make sure your JBossAS-5.x is running
            </para>
            <programlisting>$ ant
$ ant run</programlisting>
         </section>
         -->
         <section>
            <title>Maven</title>
            Make sure the Application Server is running and execute the
            following command:
            <programlisting>$ mvn -Pjbossas-remote-6 package</programlisting>
         </section>

         On the server console, you will notice the following logs:
         <programlisting><![CDATA[
INFO  [STDOUT] Received message ...
]]></programlisting>
      </para>
   </section>

</chapter>
